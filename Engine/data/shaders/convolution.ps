////////////////////////////////////////////////////////////////////////////////
// Filename: horizontalblur.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer ConvolutionBuffer
{
	matrix cMatrix;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float2 texCoord1 : TEXCOORD1;
	float2 texCoord2 : TEXCOORD2;
	float2 texCoord3 : TEXCOORD3;
	float2 texCoord4 : TEXCOORD4;
	float2 texCoord5 : TEXCOORD5;
	float2 texCoord6 : TEXCOORD6;
	float2 texCoord7 : TEXCOORD7;
	float2 texCoord8 : TEXCOORD8;
	float2 texCoord9 : TEXCOORD9;
};

#define MATRIX_SIZE (3.0f * 3.0f)

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ConvolutionPixelShader(PixelInputType input) : SV_TARGET
{
	float weights[MATRIX_SIZE] = 
	{ 
		cMatrix[0][0], cMatrix[0][1], cMatrix[0][2],
		cMatrix[1][0], cMatrix[1][1], cMatrix[1][2],
		cMatrix[2][0], cMatrix[2][1], cMatrix[2][2],
	};
	float len = 0.0f;
	for(int i = 0; i < MATRIX_SIZE; i++)
	{
		len += weights[i];
	}
	len = 1.0f / len;
	for(int i = 0; i < MATRIX_SIZE; i++)
	{
		weights[i] *= len;
	}

	float4 color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	color += shaderTexture.Sample(SampleType, input.texCoord1) * weights[0];
	color += shaderTexture.Sample(SampleType, input.texCoord2) * weights[1];
	color += shaderTexture.Sample(SampleType, input.texCoord3) * weights[2];
	color += shaderTexture.Sample(SampleType, input.texCoord4) * weights[3];
	color += shaderTexture.Sample(SampleType, input.texCoord5) * weights[4];
	color += shaderTexture.Sample(SampleType, input.texCoord6) * weights[5];
	color += shaderTexture.Sample(SampleType, input.texCoord7) * weights[6];
	color += shaderTexture.Sample(SampleType, input.texCoord8) * weights[7];
	color += shaderTexture.Sample(SampleType, input.texCoord9) * weights[8];
	color.a = 1.0f;

	return color;
}